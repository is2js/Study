package com.mdy.mybbs.model;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class BbsLoader {
	final String DATABASE_DIR = "c:/Temp/mybbs/";    //    "c:\\Temp\\mybbs\\";  이렇게 해줘도 된다.
	final String DATABASE_NAME = "mybbs.db";
	final String COLUMN_SEPERATOR = ":^:"; // 한칸 단위
	final String RECORD_SEPERATOR = "\r\n"; // 한줄 단위
	/**
	 * 저장소에서 데이터를 읽어옴.
	 * @return 반환값에 대한 설명
	 */
	public String read(){
		String result = "";
		
		//TODO 로직
		
		
		return result;
	}
	
	/**
	 * 저장소에 데이터를 저장
	 * @param bbs
	 * @throws IOException 
	 */
	public void write(Bbs bbs) throws IOException{
		// bbs에 있는 데이터를 텍스트 파일에 저장한다.
		// 1. 디렉토리가 있는지 검사
		
		File dir = new File(DATABASE_DIR);
		if(!dir.exists()){
			dir.mkdirs(); // 검사한 경로상의 모든 디렉토리를 생성해준다.
		}
		
		// 1.1 파일이 있는지 검사하고 없으면 생성
		File database = new File(DATABASE_DIR+DATABASE_NAME);
		if(!database.exists()){
			try {
			database.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		// 2. bbs에 내용을 database 파일에 저장을 해야 한다.
		// 2.1 먼저  저장하는 데이터의 구조를 설계해야 한다.
		// 2.1.1 구분자를 정의해 두어야 한다.
		
		// 2.2 bbs의 내용을 횡으로 펼친다.
		String oneData = bbs.getId() + COLUMN_SEPERATOR
				+ bbs.getTitle() + COLUMN_SEPERATOR
				+ bbs.getAuthor() + COLUMN_SEPERATOR
				+ bbs.getDate() + COLUMN_SEPERATOR
				+ bbs.getView() + COLUMN_SEPERATOR
				+ bbs.getContent() + RECORD_SEPERATOR;
		
		// 3. 횡으로 펼쳐진 데이터를 파일의 제일 마지막줄에 저장한다.
		// 3.1 JAVA 7 버전부터 파일을 다루는 새로운 API인 Path와 Files를 제공한다.
		Path path = Paths.get(DATABASE_DIR, DATABASE_NAME); // Path는 경로를 다루는 API이다.  경로를 객체화
		try {
			FileWriter writer = new FileWriter(database, true);
			writer.append(oneData);
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
